@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using NotesBlazorApp.Shared.Models;
@using NotesBlazorApp.Shared.ViewModels;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@{
	var color = Note.ColorCard != null ? $"#{Note.ColorCard?.Name}" : "white";
}

<div class="shadow p-2 round" style="background-color: @color">
	<EditForm Model="@Note" OnValidSubmit="SaveNote" >
		<div class="form-group mb-1" style="background-color: @color">
			<input type="text" class="form-control border-0" style="background-color: @color" id="title-note" @bind="Note.Title" placeholder="Введите заголовок">
		</div>
		<div class="form-group mb-1" style="background-color: @color">
			<textarea class="form-control border-0" rows="1" id="details-note" style="background-color: @color"
			@bind="Note.Details" placeholder="Текст..."></textarea>
		</div>

		<div class="form-group" style="background-color: @color">
			<div class="dropdown d-inline">
				<button class="btn" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
					<i class="fa-solid fa-palette"></i>
				</button>
				<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
					@if ((colorList != null) && (colorList.Count() > 0))
					{
						@foreach (var color in colorList)
						{
							<li class="d-inline">
								<a class="dropdown-item m-1 d-inline" href="#" style="background-color: #@color.Name; width: 1rem; height:2rem"
						   @onclick="(() => SetColor(color))"></a>
							</li>
						}
					}
				</ul>
			</div>
		</div>
		@if (Note.Id == 0)
		{
			<button type="submit" class="btn">Добавить</button>
			<button type="button" class="btn" @onclick="CancelSubmit">Отменить</button>
		}
		else
		{
			<button type="submit" class="btn" data-bs-dismiss="modal">Сохранить</button>
			<button type="button" class="btn" data-bs-dismiss="modal">Закрыть</button>
		}
	</EditForm>
</div>


@code {

	[Parameter]
	public NoteViewModel Note { get; set; } = new();

	[Parameter]
	public EventCallback SubmitFormNote { get; set; }

	private List<ColorViewModel> colorList = new();



	protected override async Task OnInitializedAsync()
	{
		try
		{
			await GetColors();
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task SaveNote()
	{
		Note.ChangedDate = DateTime.Now;

		if (Note.Id != 0)
		{		
			await Http.PutAsJsonAsync("api/notes", Note);
		}
		else
		{
			Note.CreatedDate = DateTime.Now;
			await Http.PostAsJsonAsync("api/notes", Note);
			Note = new NoteViewModel();
		}

		await SubmitFormNote.InvokeAsync();
	}


	protected async Task GetColors()
	{
		colorList = await Http.GetFromJsonAsync<List<ColorViewModel>>("api/colors");
	}


	public void SetColor(ColorViewModel colorCard)
	{
		Note.ColorCard = colorCard;
		Note.ColorCardId = colorCard.Id;

		StateHasChanged();
	}


	public void CancelSubmit()
	{
		Note = new NoteViewModel();
	}
}
